use crate::cheb::cheb_eval_e;
use crate::result::{SpecFunCode, SpecFunResult};
use log::warn;
use num::Float;

mod data;
use data::*;

/// Compute the Riemann-Zeta function for s >= 0 (for internal use only)
fn riemann_zeta_sgt0(s: f64) -> SpecFunResult<f64> {
    if s < 1.0 {
        let mut result = cheb_eval_e(2.0 * s - 1.0, &zeta_xlt1_data, -1.0, 1.0);

        result.val *= (s - 1.0).recip();
        result.err = result.err / (s - 1.0).abs() + std::f64::EPSILON * result.val.abs();
        result
    } else if s <= 20.0 {
        let x = (2.0 * s - 21.0) / 19.0;
        let mut result = cheb_eval_e(x, &zeta_xgt1_data, -1.0, 1.0);
        result.val = result.val / (s - 1.0);
        result.err = result.err / (s - 1.0) + std::f64::EPSILON * result.val.abs();
        result
    } else {
        let f2 = 1.0 - 2.0_f64.powf(-s);
        let f3 = 1.0 - 3.0_f64.powf(-s);
        let f5 = 1.0 - 5.0_f64.powf(-s);
        let f7 = 1.0 - 7.0_f64.powf(-s);
        let val = 1.0 / (f2 * f3 * f5 * f7);
        let err = 3.0 * std::f64::EPSILON * val.abs();
        SpecFunResult {
            val,
            err,
            code: SpecFunCode::Success,
        }
    }
}

/// Compute the Riemann-Zeta function for s < 0 (for internal use only)
fn riemann_zeta1ms_slt0(s: f64) -> SpecFunResult<f64> {
    if s > -19.0 {
        let x = (-19.0 - 2.0 * s) / 19.0;
        let c = cheb_eval_e(x, &zeta_xgt1_data, -1.0, 1.0);
        let val = c.val / (-s);
        let err = c.err / (-s) + std::f64::EPSILON * val.abs();
        SpecFunResult {
            val,
            err,
            code: SpecFunCode::Success,
        }
    } else {
        let f2 = 1.0 - 2.0_f64.powf(-(1.0 - s));
        let f3 = 1.0 - 3.0_f64.powf(-(1.0 - s));
        let f5 = 1.0 - 5.0_f64.powf(-(1.0 - s));
        let f7 = 1.0 - 7.0_f64.powf(-(1.0 - s));
        let val = 1.0 / (f2 * f3 * f5 * f7);
        let err = 3.0 * std::f64::EPSILON * val.abs();
        SpecFunResult {
            val,
            err,
            code: SpecFunCode::Success,
        }
    }
}

/// Compute the Riemann-Zeta function for 5 < s < 15 (for internal use only)
fn riemann_zeta_minus_1_intermediate_s(s: f64) -> SpecFunResult<f64> {
    let t = (s - 10.0) / 5.0;
    let c = cheb_eval_e(t, &zetam1_inter_data, -1.0, 1.0);
    let val = c.val.exp() + 2.0_f64.powf(-s);
    let err = (c.err + 2.0 * std::f64::EPSILON) * val;
    SpecFunResult {
        val,
        err,
        code: SpecFunCode::Success,
    }
}

/// Compute the Riemann-Zeta function for large, positive s
fn riemann_zeta_minus1_large_s(s: f64) -> SpecFunResult<f64> {
    let a = 2.0_f64.powf(-s);
    let b = 3.0_f64.powf(-s);
    let c = 5.0_f64.powf(-s);
    let d = 7.0_f64.powf(-s);
    let e = 11.0_f64.powf(-s);
    let f = 13.0_f64.powf(-s);
    let t1 = a + b + c + d + e + f;
    let t2 = a * (b + c + d + e + f) + b * (c + d + e + f) + c * (d + e + f) + d * (e + f) + e * f;

    let numt = t1 - t2 /* + t3 - t4 + t5 - t6 */;
    let zeta = 1.0 / ((1.0 - a) * (1.0 - b) * (1.0 - c) * (1.0 - d) * (1.0 - e) * (1.0 - f));
    let val = numt * zeta;
    let err = (15.0 / s + 1.0) * 6.0 * std::f64::EPSILON * val;

    SpecFunResult {
        val,
        err,
        code: SpecFunCode::Success,
    }
}

pub trait Zeta {
    /// Compute the Riemann-zeta function with error estimate.
    fn zeta_e(&self) -> SpecFunResult<f64>;
    /// Compute the Riemann-zeta function
    fn zeta(&self) -> f64;
}

impl Zeta for f64 {
    fn zeta_e(&self) -> SpecFunResult<Self> {
        let s = *self;
        if (s - 1.0).abs() < std::f64::EPSILON {
            let result = SpecFunResult {
                val: std::f64::NAN,
                err: std::f64::NAN,
                code: SpecFunCode::DomainErr,
            };
            result.issue_warning("zeta_e", &[*self]);
            result
        } else if s >= 0.0 {
            riemann_zeta_sgt0(s)
        } else {
            // reflection formula, [Abramowitz+Stegun, 23.2.5]
            let zeta_one_minus_s = riemann_zeta1ms_slt0(s);
            let fmod = s - (s / 2.0).floor() * 2.0;
            let sin_term = if fmod.abs() < std::f64::EPSILON {
                0.0
            } else {
                let fmod = s - (s / 4.0).floor() * 4.0;
                (0.5 * std::f64::consts::PI * fmod).sin() / std::f64::consts::PI
            };

            if sin_term.abs() < std::f64::EPSILON {
                return SpecFunResult {
                    val: 0.0,
                    err: 0.0,
                    code: SpecFunCode::Success,
                };
            } else if s > -170.0 {
                let twopi_pow: [f64; 18] = [
                    1.0,
                    9.589560061550901348e+007,
                    9.195966217409212684e+015,
                    8.818527036583869903e+023,
                    8.456579467173150313e+031,
                    8.109487671573504384e+039,
                    7.776641909496069036e+047,
                    7.457457466828644277e+055,
                    7.151373628461452286e+063,
                    6.857852693272229709e+071,
                    6.576379029540265771e+079,
                    6.306458169130020789e+087,
                    6.047615938853066678e+095,
                    5.799397627482402614e+103,
                    5.561367186955830005e+111,
                    5.333106466365131227e+119,
                    5.114214477385391780e+127,
                    4.904306689854036836e+135,
                ];
                let n = ((-s) / 10.0).floor() as usize;
                let fs = s + 10.0 * n as f64;
                let p = (2.0 * std::f64::consts::PI).powf(fs) / twopi_pow[n];
            }

            SpecFunResult {
                val: 0.0,
                err: 0.0,
                code: SpecFunCode::Success,
            }
        }
    }
    fn zeta(&self) -> f64 {
        0.0
    }
}

pub trait HurwitzZeta {
    fn hzeta_e(&self, q: f64) -> SpecFunResult<f64>;
    fn hzeta(&self, q: f64) -> f64;
}

impl HurwitzZeta for f64 {
    fn hzeta_e(&self, q: f64) -> SpecFunResult<f64> {
        let s = *self;
        if s <= 1.0 || q <= 0.0 {
            let result = SpecFunResult {
                val: std::f64::NAN,
                err: std::f64::NAN,
                code: SpecFunCode::DomainErr,
            };
            result.issue_warning("hzeta_e", &[*self, q]);
            result
        } else {
            let max_bits = 54.0;
            let ln_term0 = -s * q.ln();

            if ln_term0 < std::f64::MIN_POSITIVE.ln() + 1.0 {
                let result = SpecFunResult {
                    val: 0.0,
                    err: 0.0,
                    code: SpecFunCode::UnderflowErr,
                };
                result.issue_warning("hzeta_e", &[*self, q]);
                result
            } else if ln_term0 > std::f64::MAX.ln() - 1.0 {
                let result = SpecFunResult {
                    val: 0.0,
                    err: 0.0,
                    code: SpecFunCode::OverflowErr,
                };
                result.issue_warning("hzeta_e", &[*self, q]);
                result
            } else if (s > max_bits && q < 1.0) || (s > 0.5 * max_bits && q < 0.25) {
                let val = q.powf(-s);
                let err = 2.0 * std::f64::EPSILON * val.abs();
                SpecFunResult {
                    val,
                    err,
                    code: SpecFunCode::Success,
                }
            } else if s > 0.5 * max_bits && q < 1.0 {
                let p1 = q.powf(-s);
                let p2 = (q / (1.0 + q)).powf(s);
                let p3 = (q / (2.0 + q)).powf(s);
                let val = p1 * (1.0 + p2 + p3);
                let err = std::f64::EPSILON * (0.5 * s + 2.0) * val.abs();
                SpecFunResult {
                    val,
                    err,
                    code: SpecFunCode::Success,
                }
            } else {
                // Euler-Maclaurin summation formula
                // [Moshier, p. 400, with several typo corrections]
                let jmax = 12;
                let kmax = 10;
                let pmax = (kmax as f64 + q).powf(-s);
                let mut scp = s;
                let mut pcp = pmax / (kmax as f64 + q);
                let mut ans = pmax * ((kmax as f64 + q) / (s - 1.0) + 0.5);

                ans += (0..kmax).fold(0.0, |acc, k| acc + (k as f64 + q).powf(-s));

                for j in 0..(jmax + 1) {
                    let delta = hzeta_c[j + 1] * scp * pcp;
                    ans += delta;
                    if (delta / ans).abs() < 0.5 * std::f64::EPSILON {
                        break;
                    }
                    scp *= (s + (2 * j) as f64 + 1.0) * (s + (2 * j) as f64 + 2.0);
                    pcp /= (kmax as f64 + q) * (kmax as f64 + q);
                }
                let err = 2.0 * (jmax as f64 + 1.0) * std::f64::EPSILON * ans.abs();
                SpecFunResult {
                    val: ans,
                    err,
                    code: SpecFunCode::Success,
                }
            }
        }
    }
    fn hzeta(&self, q: f64) -> f64 {
        self.hzeta_e(q).val
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_hzeta_e() {
        let ss: Vec<f64> = vec![
            1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5,
            10.0,
        ];
        let truths = vec![
            vec![
                1.9481108228086432,
                1.6123753486854883,
                1.4037797688568258,
                1.2588219580922146,
                1.1507975560433554,
                1.0663718683623393,
                0.99807684637911294,
                0.94137186836233933,
                0.89332028620332813,
                0.85192914926234774,
                0.81579275298310615,
                0.78388776751837057,
                0.75544932678674183,
                0.72989284280276668,
                0.70676287723072707,
                0.68569866897860746,
                0.66641026896190146,
                0.64866163194157042,
            ],
            vec![
                0.93480220054467931,
                0.64493406684822644,
                0.49035775610023486,
                0.39493406684822644,
                0.33035775610023486,
                0.28382295573711533,
                0.24872510303901038,
                0.22132295573711533,
                0.19934238698962766,
                0.18132295573711533,
                0.16628453574995824,
                0.15354517795933755,
                0.1426158966967038,
                0.13313701469403143,
                0.12483811891892602,
                0.11751201469403143,
                0.11099728846909903,
                0.10516633568168575,
            ],
            vec![
                0.59025638507643129,
                0.34148725725091718,
                0.22736901577521972,
                0.1647105619542803,
                0.12617613064983158,
                0.10056053204432188,
                0.082541642174333723,
                0.06931053204432188,
                0.059262406579714874,
                0.051421988224323563,
                0.045166491448765424,
                0.040081757933660701,
                0.035882887418555529,
                0.032368197260003003,
                0.029391360811086893,
                0.0268439255319831,
                0.024643995132401528,
                0.022728699194534541,
            ],
            vec![
                0.41439832211716,
                0.20205690315959429,
                0.1181020258208637,
                0.077056903159594285,
                0.054102025820863702,
                0.040019866122557248,
                0.030778410660513847,
                0.024394866122557248,
                0.019804473760651021,
                0.016394866122557248,
                0.013793955353438399,
                0.011765236492927619,
                0.010152626268322332,
                0.008849784597883887,
                0.0077822558979519617,
                0.006896659597883887,
                0.0061539229038546688,
                0.0055249174854010337,
            ],
            vec![
                0.30709616445713409,
                0.12673386731705665,
                0.065171251589659707,
                0.038345519668738206,
                0.024694097539504452,
                0.016962176365418733,
                0.012227100832219349,
                0.0091496763654187331,
                0.007053937366748494,
                0.0055719676014190696,
                0.0044910437065758667,
                0.003681929219641926,
                0.0030627969326974213,
                0.0025799919805479691,
                0.0021972600517016033,
                0.0018894580145454813,
                0.0016387464424445014,
                0.0014322106437178635,
            ],
            vec![
                0.23484850566707287,
                0.082323233711138192,
                0.037317641469542009,
                0.019823233711138192,
                0.011717641469542009,
                0.0074775546987925125,
                0.0050537514237277645,
                0.0035713046987925125,
                0.0026150987793138032,
                0.0019713046987925125,
                0.0015222772507296901,
                0.0011996997605209076,
                0.00096207277609644895,
                0.00078320663265751731,
                0.00064602339338039957,
                0.00053906600765751731,
                0.00045445480583954158,
                0.00038665021738164473,
            ],
            vec![
                0.18318214815887643,
                0.054707510761454264,
                0.021898872913893511,
                0.010513336937295044,
                0.0057080112938314085,
                0.0033855558361885528,
                0.0021460122346070935,
                0.0014324308361885528,
                0.00099642035339134789,
                0.00071688908338862013,
                0.00053043968790541565,
                0.00040188268642576286,
                0.00031070941500103944,
                0.00024446308084091187,
                0.00019530449753493036,
                0.00015814633509060089,
                0.00012959701409291838,
                0.00010734107166531003,
            ],
            vec![
                0.14476040944446772,
                0.036927755143369926,
                0.013073166646113807,
                0.0056777551433699263,
                0.0028331666461138068,
                0.0015625288059213667,
                0.00092919806159545136,
                0.00058596630592136666,
                0.00038727525172568219,
                0.00026596630592136666,
                0.00018858042834675253,
                0.00013736548287609917,
                0.00010239512455702312,
                0.000077866464609900563,
                0.000060255206861549873,
                0.000047348886484900563,
                0.00003771772597439011,
                0.000030413798676470276,
            ],
            vec![
                0.11542450183198818,
                0.025204579954685695,
                0.0079023183353329047,
                0.0031074930426060845,
                0.0014259736873080638,
                0.00073156600890392081,
                0.00040825967038683095,
                0.00024328475890392081,
                0.00015279480789444304,
                0.00010017640834393427,
                0.000068071050533364449,
                0.000047675342183458063,
                0.000034266393163460416,
                0.000025186827099907922,
                0.000018879070834645873,
                0.00001439723388111905,
                0.000011148778664997405,
                8.7522046116422876e-6,
            ],
            vec![
                0.092612905020295802,
                0.01734306198444914,
                0.0048214098213931957,
                0.0017180619844491397,
                0.0007254098213931957,
                0.00034631987196628649,
                0.00018141879724509415,
                0.00010217924696628649,
                0.000060991506162923221,
                0.000038179246966286491,
                0.000024865174639481465,
                0.000016745776458741909,
                0.000011605897133369249,
                8.2459167064278225e-6,
                5.987241440639482e-6,
                4.4312194408028225e-6,
                3.3357731009736275e-6,
                2.5495430176439017e-6,
            ],
            vec![
                0.074644112965580588,
                0.012005899888524796,
                0.0029626573011437345,
                0.00095735643248499103,
                0.00037211944193379812,
                0.00016538075458426982,
                0.000081344008527731592,
                0.000043310442084269819,
                0.000024574039084978722,
                0.000014688771972272511,
                9.169719564782615e-6,
                5.9385942788598088e-6,
                3.9690030463358407e-6,
                2.7259492669240743e-6,
                1.9173600691605683e-6,
                1.3772501145754653e-6,
                1.0079139315548661e-6,
                7.5002464018915834e-7,
            ],
            vec![
                0.060358227504199009,
                0.0083492773819228268,
                0.0018305640382639378,
                0.00053677738192282684,
                0.00019216403826393778,
                0.000079530011095209099,
                0.000036738031364480193,
                0.000018494854845209099,
                9.976411123997765e-6,
                5.6948548452090986e-6,
                3.4079872106447186e-6,
                2.122609760618335e-6,
                1.3680983635505315e-6,
                9.0834408171632259e-7,
                6.1894427118656256e-7,
                4.3150692351319759e-7,
                3.0700681946116791e-7,
                2.2243176538442862e-7,
            ],
            vec![
                0.048923622083103198,
                0.0058267275365228077,
                0.0011359849734786291,
                0.00030245580850290517,
                0.000099769829794654542,
                0.00003846391586933143,
                0.00001669113453577839,
                7.9463377443314301e-6,
                4.0755857707221969e-6,
                2.2220037219319685e-6,
                1.2748004034138138e-6,
                7.6364077302985149e-7,
                4.7469016980661777e-7,
                3.0469148561046085e-7,
                2.0113777284991478e-7,
                1.3610409156688472e-7,
                9.4144109602185114e-8,
                6.6412372190628401e-8,
            ],
            vec![
                0.039725830475806542,
                0.0040773561979443394,
                0.00070738816518316098,
                0.00017110619794433938,
                0.000052028165183160983,
                0.000018690407668466798,
                7.6207346404588146e-6,
                3.4316186059667983e-6,
                1.6737079203516083e-6,
                8.7161860596679829e-7,
                4.794490270146908e-7,
                2.7624442520167102e-7,
                1.6561997361558509e-7,
                1.0277789964424068e-7,
                6.5732761300389234e-8,
                4.3173254868850051e-8,
                2.9034237567989864e-8,
                1.9942681743431276e-8,
            ],
            vec![
                0.03230014140927599,
                0.0028592508824156277,
                0.00044171666952627708,
                0.000097115018405676446,
                0.000027230612052687268,
                9.1177208611518669e-6,
                3.4938419787226536e-6,
                1.4883263299018669e-6,
                6.9038669759905507e-7,
                3.4345952542197457e-7,
                1.8115299445207632e-7,
                1.0039903393828841e-7,
                5.8059112358661548e-8,
                3.4834850021232603e-8,
                2.158545943110115e-8,
                1.3761425765785587e-8,
                8.9979696372506005e-9,
                6.0179013906459958e-9,
            ],
            vec![
                0.026288734128011568,
                0.0020083928260822144,
                0.00027643925426264713,
                0.000055267826082214418,
                0.000014295254262647135,
                4.4625626569235577e-6,
                1.6074169647322295e-6,
                6.4786539129855772e-7,
                2.8585547137507255e-7,
                1.3586539129855772e-7,
                6.8717490768360272e-8,
                3.6636361171036508e-8,
                2.0436097937728624e-8,
                1.1855428948546459e-8,
                7.1178029623691772e-9,
                4.4048483516226313e-9,
                2.8003295820868983e-9,
                1.8236735599094341e-9,
            ],
            vec![
                0.021412267918082234,
                0.0014125906121736623,
                0.00017331809158242516,
                0.000031522680168686638,
                7.523668592989229e-6,
                2.1902476538451112e-6,
                7.4173428614219627e-7,
                2.828990210326112e-7,
                1.1874422367028549e-7,
                5.392566013663273e-8,
                2.6156277643562085e-8,
                1.3415578222685037e-8,
                7.2187573214982733e-9,
                4.0492662345342073e-9,
                2.3556035978235534e-9,
                1.4150882026033303e-9,
                8.7472244560584175e-10,
                5.5469660536559791e-10,
            ],
            vec![
                0.0174503557579013,
                0.00099457512781808534,
                0.00010882584206868631,
                0.000018012627818085337,
                3.9682420686863082e-6,
                1.0775400096550504e-6,
                3.4314569785347818e-7,
                1.2386569324880043e-7,
                4.9465365996332194e-8,
                2.1465693248800435e-8,
                9.9857331587481434e-9,
                4.9275215608802331e-9,
                2.5578265694201977e-9,
                1.3873883862387975e-9,
                7.8205390603893803e-10,
                4.5606581162331896e-10,
                2.741158612998464e-10,
                1.6926861254407483e-10,
            ],
        ];

        for (s, ts) in ss.iter().zip(truths.iter()) {
            for (q, t) in ss.iter().zip(ts) {
                let res = s.hzeta_e(*q);
                let abserr = (res.val - t).abs();
                assert!(res.err > abserr);
                assert!(abserr < 1e-10)
            }
        }
    }
}
